# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: splitcloud-serverless-charts-service # NOTE: update this with your service name
package:
  exclude:
   - screenshots/**
   - scripts
custom:
  serverless-offline:
    httpPort: 7777
  domains:
    prod: rest.splitcloud-app.com
    dev: dev-rest.splitcloud-app.com
  myStage: ${opt:stage, self:provider.stage}
  prod: 
    sc_charts_cache: rate(1 day)
    schedule_token: rate(5 minutes)
    schedule_discovery: rate(1 day)
    schedule_country_charts: cron(0 19 ? * MON *)
    schedule_trending_post: cron(0 20 ? * MON *)
    schedule_wrapped_yearly: cron(0 18 30 12 ? *)
    country_charts_queue: "https://sqs.us-east-1.amazonaws.com/348868901434/splitcloud_charts_by_region"
    country_charts_arn: "arn:aws:sqs:us-east-1:348868901434:splitcloud_charts_by_region"
    wrapped_playlist_queue: "https://sqs.us-east-1.amazonaws.com/348868901434/wrapped_playlist_queue_prod"
    wrapped_playlist_arn: "arn:aws:sqs:us-east-1:348868901434:wrapped_playlist_queue_prod"
  dev: 
    sc_charts_cache: 
    schedule: 
    schedule_token:
    schedule_discovery:
    schedule_country_charts:
    schedule_trending_post: 
    schedule_wrapped_yearly:
    country_charts_queue: "https://sqs.us-east-1.amazonaws.com/348868901434/splitcloud_charts_by_region_dev"
    country_charts_arn: "arn:aws:sqs:us-east-1:348868901434:splitcloud_charts_by_region_dev"
    wrapped_playlist_queue: "https://sqs.us-east-1.amazonaws.com/348868901434/wrapped_playlist_queue_dev"
    wrapped_playlist_arn: "arn:aws:sqs:us-east-1:348868901434:wrapped_playlist_queue_dev"
  bucket: "www.splitcloud-app.com"
  customDomain:
    domainName: ${self:custom.domains.${self:custom.myStage}}
    basePath: ''
    stage: "${self:custom.myStage}"
    createRoute53Record: true
  
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 10
  versionFunctions: false
  apiGateway:
    minimumCompressionSize: 2048
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: "Allow"
      Action:
      - sqs:SendMessage
      - sqs:GetQueueUrl
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      Resource: ${self:custom.${self:custom.myStage}.country_charts_arn}
    - Effect: "Allow"
      Action:
      - sqs:SendMessage
      - sqs:GetQueueUrl
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      Resource: ${self:custom.${self:custom.myStage}.wrapped_playlist_arn}

functions:
  charts_endpoint:
    handler: src/handlers/api.chartsEndpoint
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: charts
          method: get
  top_regions:
    handler: src/handlers/api.topRegions
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: regions
          method: get
  postsRegions:
    handler: src/handlers/api.postsRegions
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: posts/regions
          method: get
  log_collector:
    timeout: 30
    handler: src/handlers/api.logCollector
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: app/feedback/{deviceid}
          method: POST
          request:
            parameters:
              paths:
                deviceid: true
  exploreRelated:
    handler: src/handlers/api.exploreRelated
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: explore/related
          method: POST
  radio_countrycodes:
    handler: src/handlers/api.radioCountryCodes
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: radio/countrycodes
          method: get
  app_config_api:
    handler: src/handlers/api.appConfigApi
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: app/config
          method: get
  radioListByCountrycode:
    handler: src/handlers/api.radioListByCountryCode
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: radio/list/countrycode/{countrycode}
          method: get
          request:
            parameters:
              paths:
                countrycode: true
  yearWrapped:
    handler: src/handlers/api.yearWrappedTopList
    timeout: 30
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: wrapped/{year}/{deviceId}/{side}
          method: get
          cors: true
          request:
            parameters:
              paths:
                year: true
                deviceId: true
                side: true
  ctaEndpoint:
    handler: src/handlers/api.ctaEndpoint
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - http:
          path: cta/{deviceId}/{side}
          method: get
          cors: true
          request:
            parameters:
              paths:
                deviceId: true
                side: true
  token:
    handler: src/handlers/batch.selectActiveToken
    timeout: 30
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - schedule: ${self:custom.${self:custom.myStage}.schedule_token}
  discovery:
    handler: src/handlers/batch.updateDiscoveryApi
    timeout: 120
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - schedule: ${self:custom.${self:custom.myStage}.schedule_discovery}
  chartsCache:
    handler: src/handlers/batch.scChartsCache
    timeout: 30
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage} 
    events:
      - schedule: ${self:custom.${self:custom.myStage}.sc_charts_cache}
  country_charts_pub:
    handler: src/handlers/batch.countryChartsPublisher
    timeout: 60
    environment:
      BUCKET: ${self:custom.bucket}
      COUNTRY_CHARTS_QUEUE: ${self:custom.${self:custom.myStage}.country_charts_queue}
      STAGE: ${self:custom.myStage} 
    events:
      - schedule: ${self:custom.${self:custom.myStage}.schedule_country_charts}
  country_charts_sub:
    handler: src/handlers/batch.countryChartsSubscribe
    timeout: 120
    reservedConcurrency: 2
    environment:
      BUCKET: ${self:custom.bucket}
      COUNTRY_CHARTS_QUEUE: ${self:custom.${self:custom.myStage}.country_charts_queue}
      STAGE: ${self:custom.myStage}
    events:
      - sqs:
          arn: ${self:custom.${self:custom.myStage}.country_charts_arn}
          batchSize: 1
  generateTrendingPost:
    handler: src/handlers/batch.generateTrendingPosts
    timeout: 120
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage}
    events:
      - schedule: ${self:custom.${self:custom.myStage}.schedule_trending_post}
  wrappedPlaylistPub:
    handler: src/handlers/batch.wrappedPlaylistPublisher
    timeout: 120
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage}
      WRAPPED_PLAYLIST_QUEUE: ${self:custom.${self:custom.myStage}.wrapped_playlist_queue}
    events:
      - schedule: ${self:custom.${self:custom.myStage}.schedule_wrapped_yearly}
  wrappedPlaylistSub:
    handler: src/handlers/batch.wrappedPlaylistSubscribe
    timeout: 50
    reservedConcurrency: 4
    environment:
      BUCKET: ${self:custom.bucket}
      STAGE: ${self:custom.myStage}
      WRAPPED_PLAYLIST_QUEUE: ${self:custom.${self:custom.myStage}.wrapped_playlist_queue}
    events:
      - sqs:
          arn: ${self:custom.${self:custom.myStage}.wrapped_playlist_arn}
          batchSize: 1
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-prune-plugin
 

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
